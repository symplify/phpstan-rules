includes:
    - config/services/services.neon
    - config/naming-rules.neon

parameters:
    treatPhpDocTypesAsCertain: false
    errorFormat: symplify

    level: 8

    # custom configuration
    maximumIgnoredErrorCount: 10

    paths:
        - src
        - config
        - tests

    excludePaths:
        # parallel
        - packages/*-phpstan-printer/tests/*ToPhpCompiler/Fixture*

        # tests
        - '*/tests/**/Source/*'
        - */stubs/*
        - */Fixture/*

    ignoreErrors:
        - '#Method Symplify\\PHPStanRules\\Reflection\\ReflectionParser\:\:parseNativeClassReflection\(\) has parameter \$reflectionClass with generic class ReflectionClass but does not specify its types\: T#'

        # overly detailed
        - '#Class Symplify\\PHPStanRules\\(.*?) extends generic class PHPStan\\Testing\\RuleTestCase but does not specify its types\: TRule#'
        - '#Method Symplify\\PHPStanRules\\(.*?)\:\:getRule\(\) return type with generic interface PHPStan\\Rules\\Rule does not specify its types\: TNodeType#'
        - '#Parameter \#2 \$expectedErrors of method PHPStan\\Testing\\RuleTestCase<PHPStan\\Rules\\Rule>\:\:analyse\(\) expects list<array\{0\: string, 1\: int, 2\?\: string\|null\}>, (.*?) given#'

        # part of public contract
        - '#Method Symplify\\PHPStanRules\\Tests\\Rules\\(.*?)\\(.*?)Test\:\:testRule\(\) has parameter \$(expectedError(.*?)|expectedErrors) with no value type specified in iterable type array#'

        # useful to have IDE know the types
        - identifier: phpstanApi.instanceofType

        # fast effective check
        -
            message: '#Function is_a\(\) is a runtime reflection concept that might not work in PHPStan because it uses fully static reflection engine#'
            path: src/Rules/SeeAnnotationToTestRule.php

        # used in tests
        - '#Public constant "Symplify\\PHPStanRules\\(.*?)Rule\:\:ERROR_MESSAGE" is never used#'

        - '#Although PHPStan\\Node\\InClassNode is covered by backward compatibility promise, this instanceof assumption might break because (.*?) not guaranteed to always stay the same#'
        - '#PHPStan\\DependencyInjection\\NeonAdapter#'
