services:
    -
        class: Symplify\PHPStanRules\Rules\NoDuplicatedShortClassNameRule
        tags: [phpstan.rules.rule]
        arguments:
            toleratedNestingLevel: 2

    -
        class: Symplify\PHPStanRules\ObjectCalisthenics\Rules\NoShortNameRule
        tags: [phpstan.rules.rule]
        arguments:
            minNameLength: 2

    -
        class: Symplify\PHPStanRules\Rules\ForbiddenNodeRule
        tags: [phpstan.rules.rule]
        arguments:
            forbiddenNodes:
                - PhpParser\Node\Stmt\Trait_
                - PhpParser\Node\Expr\Empty_
                - PhpParser\Node\Stmt\Switch_
                - PhpParser\Node\Expr\ErrorSuppress
                - PhpParser\Node\Scalar\Encapsed
                - PhpParser\Node\Scalar\EncapsedStringPart
                # use pre* nodes instead
                - PhpParser\Node\Expr\PostInc
                - PhpParser\Node\Expr\PostDec

    -
        class: Symplify\PHPStanRules\Rules\PreferredClassRule
        tags: [phpstan.rules.rule]
        arguments:
            oldToPreferredClasses:
                PHPStan\Node\ClassMethod: 'PhpParser\Node\Stmt\ClassMethod'
                DateTime: 'Nette\Utils\DateTime'
                'PhpCsFixer\Finder': 'Symfony\Component\Finder\Finder'

    -
        class: Symplify\PHPStanRules\Rules\ForbiddenFuncCallRule
        tags: [phpstan.rules.rule]
        arguments:
            forbiddenFunctions:
                - 'd'
                - 'dd'
                - 'dump'
                - 'var_dump'
                - 'extract'
                - 'curl_*'
                - 'compact'
                - 'method_exists'
                - 'property_exists'
                - 'spl_autoload_register'
                - 'spl_autoload_unregister'
                - array_walk
                preg_match: "Use Nette\\Utils\\Strings::match() instead"
                preg_match_all: "Use Nette\\Utils\\Strings::matchAll() instead"
                preg_replace: "Use Nette\\Utils\\Strings::replace() instead"
                preg_replace_callback: "Use Nette\\Utils\\Strings::replace() instead"
                preg_split: "Use Nette\\Utils\\Strings::split() instead"
                file_get_contents: "Use Symplify\\SmartFileSystem\\SmartFileSystem::readFile() instead"
                file_put_contents: "Use Symplify\\SmartFileSystem\\SmartFileSystem::dumpFile() instead"
                json_encode: "Use Nette\\Utils\\Json::encode() instead"
                json_decode: "Use Nette\\Utils\\Json::decode() instead"

    -
        class: Symplify\PHPStanRules\Rules\SeeAnnotationToTestRule
        tags: [phpstan.rules.rule]
        arguments:
            requiredSeeTypes:
                - PHPStan\Rules\Rule
                - PHP_CodeSniffer\Sniffs\Sniff
                - PHP_CodeSniffer\Fixer
